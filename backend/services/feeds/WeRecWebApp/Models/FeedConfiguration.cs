/*
 * Swagger WeRec - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace WeRecWebApp.Models { 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class FeedConfiguration : IEquatable<FeedConfiguration>
    { 
        [DataMember(Name="id")]
        public string Id { get; set; }
        
        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>

        [DataMember(Name="keyword")]
        public string Keyword { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>

        [DataMember(Name="quantity")]
        public int Quantity { get; set; }
        
        /// <summary>
        /// Mode
        /// </summary>
        /// <value>Mode</value>

        [DataMember(Name="mode")]
        public VideoMode Mode { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>

        [DataMember(Name="sources")]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedConfiguration {\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeedConfiguration)obj);
        }

        /// <summary>
        /// Returns true if FeedConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of FeedConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedConfiguration other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Keyword == other.Keyword ||
                    Keyword != null &&
                    Keyword.Equals(other.Keyword)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    Sources == other.Sources ||
                    Sources != null &&
                    Sources.SequenceEqual(other.Sources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (Sources != null)
                    hashCode = hashCode * 59 + Sources.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeedConfiguration left, FeedConfiguration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeedConfiguration left, FeedConfiguration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
